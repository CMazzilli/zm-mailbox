<project xmlns:ivy="antlib:org.apache.ivy.ant" name="zm-store" default="jar">

    <import file="../zm-zcs/ant-global.xml"/>
	<property name="config.dir" location="conf" />
	<property name="warfilename" value="service.war"/>
    <property name="warfile" location="${build.dir}/${warfilename}"/>
	<condition property="production.suffix" value=".production" else="">
	            <isset property="is-production"/>
	        </condition>
	<condition property="war.web.xml" value="${config.dir}/web.xml${production.suffix}">
		<not>
			<isset property="war.web.xml" />
		</not>
	</condition>


	<target name="make-dirs">
	<!-- take advantage of the fact that mkdir uses File.mkdirs() and creates inbetween dirs -->
		<echo>Creating dirs under ${base.dir}</echo>

		<mkdir dir="${base.dir}/${slapd.conf.dir}" />
		<mkdir dir="${base.dir}/${slapd.etc.dir}/schema" />
		<mkdir dir="${base.dir}/bin" />
		<mkdir dir="${base.dir}/conf/msgs" />
		<mkdir dir="${base.dir}/db" />
		<mkdir dir="${base.dir}/lib/ext" />
		<mkdir dir="${base.dir}/lib/jars" />
		<mkdir dir="${base.dir}/lib/jars-ant" />
		<mkdir dir="${base.dir}/libexec" />
	</target>

	<target name="build-init" description="Creates directories required for compiling">
		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${generated.java.dir}" />
		<mkdir dir="${build.dir}/data" />
		<antcall target="make-dirs">
			<param name="base.dir" value="${dist.dir}" />
		</antcall>
	</target>

	<target name="generate-buildinfo" depends="build-init">
		<mkdir dir="${build.dir}/buildinfo/com/zimbra/cs/util" />
		<echo file="${build.dir}/buildinfo/com/zimbra/cs/util/BuildInfoGenerated.java">
            package com.zimbra.cs.util;

            class BuildInfoGenerated {
                public static final String MAJORVERSION = "${zimbra.buildinfo.majorversion}";
                public static final String MINORVERSION = "${zimbra.buildinfo.minorversion}";
                public static final String MICROVERSION = "${zimbra.buildinfo.microversion}";
                public static final String RELCLASS = "${zimbra.buildinfo.relclass}";
                public static final String RELNUM = "${zimbra.buildinfo.relnum}";
                public static final String BUILDNUM = "${zimbra.buildinfo.buildnum}";
                public static final String VERSION = "${zimbra.buildinfo.version}";
                public static final String TYPE = "${zimbra.buildinfo.type}";
                public static final String RELEASE = "${zimbra.buildinfo.release}";
                public static final String DATE = "${DSTAMP}-${TSTAMP}";
                public static final String HOST = "${zimbra.buildinfo.host}";
            }
        </echo>
		<javac includeantruntime="false" destdir="${build.classes.dir}" debug="true" target="${javac.target}" srcdir="${build.dir}/buildinfo">
		</javac>
	</target>


	<target name="generate-getters" depends="compile,generate-buildinfo" description="generate methods for attributes in zimbra-attrs.xml">
		<antcall target="generate-getter">
			<param name="getter.class" value="account" />
			<param name="getter.output" value="ZAttrAccount.java" />
		</antcall>
		<antcall target="generate-getter">
			<param name="getter.class" value="calendarResource" />
			<param name="getter.output" value="ZAttrCalendarResource.java" />
		</antcall>
		<antcall target="generate-getter">
			<param name="getter.class" value="cos" />
			<param name="getter.output" value="ZAttrCos.java" />
		</antcall>
		<antcall target="generate-getter">
			<param name="getter.class" value="domain" />
			<param name="getter.output" value="ZAttrDomain.java" />
		</antcall>
		<antcall target="generate-getter">
			<param name="getter.class" value="server" />
			<param name="getter.output" value="ZAttrServer.java" />
		</antcall>
		<antcall target="generate-getter">
			<param name="getter.class" value="ucService" />
			<param name="getter.output" value="ZAttrUCService.java" />
		</antcall>
		<antcall target="generate-getter">
			<param name="getter.class" value="globalConfig" />
			<param name="getter.output" value="ZAttrConfig.java" />
		</antcall>
		<antcall target="generate-getter">
			<param name="getter.class" value="distributionList" />
			<param name="getter.output" value="ZAttrDistributionList.java" />
		</antcall>
		<antcall target="generate-getter">
			<param name="getter.class" value="group" />
			<param name="getter.output" value="ZAttrDynamicGroup.java" />
		</antcall>
		<antcall target="generate-getter">
			<param name="getter.class" value="shareLocator" />
			<param name="getter.output" value="ZAttrShareLocator.java" />
		</antcall>
		<antcall target="generate-getter">
			<param name="getter.class" value="alwaysOnCluster" />
			<param name="getter.output" value="ZAttrAlwaysOnCluster.java" />
		</antcall>
		<antcall target="generate-provisioning" />
	</target>

	

	<path id="p4-prov-files">
		<pathelement location="${src.java.dir}/com/zimbra/cs/account/ZAttrAccount.java" />
		<pathelement location="${src.java.dir}/com/zimbra/cs/account/ZAttrCalendarResource.java" />
		<pathelement location="${src.java.dir}/com/zimbra/cs/account/ZAttrCos.java" />
		<pathelement location="${src.java.dir}/com/zimbra/cs/account/ZAttrDomain.java" />
		<pathelement location="${src.java.dir}/com/zimbra/cs/account/ZAttrServer.java" />
		<pathelement location="${src.java.dir}/com/zimbra/cs/account/ZAttrUCService.java" />
		<pathelement location="${src.java.dir}/com/zimbra/cs/account/ZAttrConfig.java" />
		<pathelement location="${src.java.dir}/com/zimbra/cs/account/ZAttrDistributionList.java" />
		<pathelement location="${src.java.dir}/com/zimbra/cs/account/ZAttrDynamicGroup.java" />
		<pathelement location="${src.java.dir}/com/zimbra/cs/account/ZAttrShareLocator.java" />
		<pathelement location="${src.java.dir}/com/zimbra/cs/account/ZAttrAlwaysOnCluster.java" />
		<pathelement location="${common.src.java.dir}/com/zimbra/common/account/ZAttrProvisioning.java" />
	</path>

	

	<target name="generate-getter">
		<java classname="com.zimbra.cs.account.AttributeManagerUtil" fork="true" classpathref="class.path" failonerror="true">
			<sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}" />
			<arg line="-a generateGetters -c ${getter.class} -i ${config.dir}/attrs -r ${src.java.dir}/com/zimbra/cs/account/${getter.output}" />
		</java>
	</target>

	<target name="generate-provisioning">
		<java classname="com.zimbra.cs.account.AttributeManagerUtil" fork="true" classpathref="class.path" failonerror="true">
			<sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}" />
			<arg line="-a generateProvisioning -i ${config.dir}/attrs -r ${common.src.java.dir}/com/zimbra/common/account/ZAttrProvisioning.java" />
		</java>
	</target>

	<target name="jar" depends="generate-buildinfo,compile" description="Creates the jar file">
		<antcall target="zimbra-jar">
			<param name="implementation.title" value="Zimbra Server" />
		</antcall>
	</target>

	<target name="clean" description="Deletes classes from build directories">
		<delete dir="${build.dir}" />
	</target>

	<!-- jetty loads jetty-util*.jar, log4j*.jar and slf4j*.jar -->

	<target name="war" depends="jar,set-dev-version">
		<echo>packaging ${build.dir}/${jar.file} into ${warfile}</echo>
		<delete dir="${build.tmp.dir}" /> <!-- delete anything that may have been left over, e.g.: older versions of same libs -->
		<ivy:install organisation="org.slf4j" module="slf4j-api" revision="1.6.4" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="org.slf4j" module="slf4j-log4j12" revision="1.6.4" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="org.apache.james" module="apache-jsieve-core" revision="0.5" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="org.apache.lucene" module="lucene-core" revision="3.5.0" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="org.apache.lucene" module="lucene-analyzers" revision="3.5.0" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="ant-tar-patched" module="ant-tar-patched" revision="1.0" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="org.apache.mina" module="mina-core" revision="2.0.4" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="ews_2010" module="ews_2010" revision="1.0" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="org.apache.zookeeper" module="zookeeper" revision="3.4.5" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="com.101tec" module="zkclient" revision="0.1.0" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="org.apache.curator" module="curator-recipes" revision="2.0.1-incubating" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="org.apache.curator" module="curator-client" revision="2.0.1-incubating" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="org.apache.curator" module="curator-x-discovery" revision="2.0.1-incubating" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="org.apache.curator" module="curator-framework" revision="2.0.1-incubating" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="org.codehaus.jackson" module="jackson-core-asl" revision="1.9.2" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="org.codehaus.jackson" module="jackson-smile" revision="1.9.2" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="org.codehaus.jackson" module="jackson-mapper-asl" revision="1.9.2" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="org.codehaus.jackson" module="jackson-xc" revision="1.9.2" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="asm" module="asm" revision="3.3.1" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="net.sf.ehcache" module="ehcache-core" revision="2.5.1" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="oauth" module="oauth" revision="1.4" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="com.googlecode.owasp-java-html-sanitizer" module="owasp-java-html-sanitizer" revision="r239" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="zimbrasoap" module="zimbrasoap" revision="1.0" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="zimbraclient" module="zimbraclient" revision="1.0" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="zimbracommon" module="zimbracommon" revision="1.0" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<ivy:install organisation="zimbra-native" module="zimbra-native" revision="1.0" settingsRef="dev.settings" from="chain-resolver" to="build-tmp" overwrite="true" transitive="true" type="jar"/>
		<war warfile="${warfile}" webxml="${war.web.xml}">
			<fileset dir="WebRoot" />
			<lib file="${build.dir}/${jar.file}" />
			<lib dir="${build.tmp.dir}" includes="*.jar" />
				<!--include name="jersey-*.jar" / --> <!-- only used by zm-openoffice-store -->
				<!-- include name="jsr*.jar" / --> <!-- only used by zm-ews-store -->
				<!-- include name="cxf-*.jar" / --> <!-- only used by zm-ews-store -->
				<!-- include name="javax.ws.rs-api-*.jar" / --> <!-- only used by zm-openoffice-store -->
				<!-- include name="httpasyncclient-*.jar" / --> <!-- only used by zm-ews-store -->
				<!-- include name="httpclient-*.jar" / --> <!-- only used by zm-ews-store -->
				<!-- include name="httpcore-*.jar" / --> <!-- only used by zm-ews-store -->
				<!-- include name="neethi-*.jar" / --> <!-- only used by zm-ews-store -->
				<!-- include name="objenesis-*.jar" / --> <!-- only used by zm-openoffice-store and zm-ews-store -->
				<!-- include name="spring-*.jar" / --> <!-- only used by zm-ews-store -->
				<!-- include name="woodstox-core-asl-*.jar" / --> <!-- only used by zm-ews-store -->
				<!-- include name="wsdl4j-*.jar" / --> <!-- only used by zm-ews-store -->
				<!-- include name="xmlschema-core-*.jar" / --> <!-- only used by zm-ews-store -->
				<!-- include name="stax2-api-*.jar" / --> <!-- only used by zm-ews-store -->
			<!-- /lib -->
			<classes dir="${config.dir}" includes="sieveConfig.xml" />
			<classes dir="${config.dir}" includes="cxf.xml" />
		</war>
	</target>

	<target name="test-jar" depends="test-compile" description="creates the jar file needed for testing">
		<antcall target="zimbra-jar">
			<param name="jar.file" value="zimbrastore-test.jar" />
			<param name="implementation.title" value="zm-store test" />
			<param name="jar.build.dir" value="${server.dir}/build/test-classes/"/>
		</antcall>
	</target>

</project>

