Zimbra Mobile Gateway SOAP API Extensions
-----------------------------------------

The very first request that an app needs to send to ZMG is the BootstrapMobileGatewayAppRequest.
The response would include a key (or a secret) for the app, that the app can use to authenticate itself in the future,
as well as an auth token that the app can use to start using base SOAP API.


<BootstrapMobileGatewayAppRequest xmlns="urn:zimbraAccount">
  <appId>{app-uuid}</appId>
  <ua>{device-user-agent}<ua>
</BootstrapMobileGatewayAppRequest>

appId - A uuid generated by the app at install time
ua    - Device user-agent string


<BootstrapMobileGatewayAppResponse xmlns="urn:zimbraAccount">
  <appKey>{app-key}</appKey>
  <authToken lifetime="{auth-token-lifetime}">{app-auth-token}</authToken>
</BootstrapMobileGatewayAppResponse>


The app should persist the app uuid and the app key on the device in a secure manner.

----

To add an email account (like gmail) the app would need to use the CreateDataSourceRequest API (refer base SOAP API).
An app is allowed to specify the folder id as "-1" to indicate that the server should create the folder itself into
which the external data would be imported. The created folder's id would be returned in the response.

<CreateDataSourceRequest/>
  <imap ... l="-1" .../>
</CreateDataSourceRequest>

<CreateDataSourceResponse>
  <imap id="{id}" l="{folder-id}"/>
</CreateDataSourceResponse>

The client would also need to send ImportDataRequest (refer base SOAP API) to trigger sync with the datasource.
By default the server does not initiate the data sync on its own (there's a server setting to specify an automatic
sync interval though). The sync is initiated on-demand on receipt of ImportDataRequest.

----

If the app auth token expires, the app can request a new auth token.

<RenewMobileGatewayAppTokenRequest xmlns="urn:zimbraAccount">
  <appId>{app-uuid}</appId>
  <appKey>{app-key}</appKey>
</RenewMobileGatewayAppTokenRequest>

<RenewMobileGatewayAppTokenResponse xmlns="urn:zimbraAc count">
  <authToken lifetime="{auth-token-lifetime}">{app-auth-token}</authToken>
</RenewMobileGatewayAppTokenResponse>

----

------ Push Notifications ----- 

Push notifications for Android Apps using Google Cloud Messaging - 

For push notifications using GCM, a project needs to be created using Google APIs console page. 
The “Project Number” aka sender id of this project is used by android client to register itself 
for GCM. After registering itself, the android client receives a registration Id. 
The android client uploads this registration id with its messaging server. The server will use 
the registration id to send notifications to that device. Along with registration id, the server also needs a 
Server API key for sending notifications, the server API key is also created while creating the project 
on Google APIs console

Please refer the following links for detailed information about Google Cloud Messaging - 

http://www.androidhive.info/2012/10/android-push-notifications-using-google-cloud-messaging-gcm-php-and-mysql/

http://developer.android.com/google/gcm/gs.html

----- Android client can get GCM sender id by using the following request, response ----- 

<GetGcmSenderIdRequest xmlns="urn:zimbraAccount">
</GetGcmSenderIdRequest>

<GetGcmSenderIdResponse xmlns="urn:zimbraAccount">
<gcmSenderId>{sender-id}<gcmSenderId/>
</GetGcmSenderIdResponse>

----- Adding a Zmg Device -----

Android clients using Google Cloud messaging should specify "gcm" as pushProvider

<AddZmgDeviceRequest xmlns="urn:zimbraAccount">
            <zmgDevice deviceId={deviceId} registrationId={registrationId} pushProvider=gcm>
            </zmgDevice>
</AddZmgDeviceRequest>

Response is "1" id device is added successfully, else response is "0"

<AddZmgDeviceResponse xmlns="urn:zimbraAccount">
<success>{ 0 | 1 }</success>
</AddZmgDeviceResponse>


---- NewMessagePushNotification ----

Payload of a new message GCM push notification contains -

cid  - conversationId
msgId - messageId of the message
subject - subject of the message
sender - sender email address
fragment - preview text of the conversation
recipientAddress - recipient email address  





